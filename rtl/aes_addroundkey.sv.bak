


module aes_addroundkey (

	  		sa00,	sa01,	sa02,	sa03,
	  		sa10,	sa11,	sa12,   sa13,
	  		sa20, 	sa21,	sa22,	sa23,
	  		sa30,	sa31,	sa32,	sa33,

			sa00_next,	sa01_next,	sa02_next,	sa03_next,
			sa10_next,	sa11_next,	sa12_next,	sa13_next,
	    		sa20_next,	sa21_next,	sa22_next, 	sa23_next,
	    		sa30_next,	sa31_next, 	sa32_next,	sa33_next
);


	input [7:0]		sa00_next;
	input [7:0]		sa01_next;
	input [7:0]		sa02_next;
	input [7:0]		sa03_next;
	input [7:0]		sa10_next;
	input [7:0]		sa11_next;
	input [7:0]		sa12_next;
	input [7:0]		sa13_next;
	input [7:0]		sa20_next;
	input [7:0]		sa21_next
	input [7:0]		sa22_next;
	input [7:0]		sa23_next;
	input [7:0]		sa30_next;
	input [7:0]		sa31_next;
	input [7:0]		sa32_next;
	input [7:0]		sa33_next;

	output [7:0]		sa00;
	output [7:0]		sa01;
	output [7:0]		sa02;
	output [7:0]		sa03;
	output [7:0]		sa10;
	output [7:0]		sa11;
	output [7:0]		sa12;
	output [7:0]		sa13;
	output [7:0]		sa20;
	output [7:0]		sa21;
	output [7:0]		sa22;
	output [7:0]		sa23;
	output [7:0]		sa30;
	output [7:0]		sa31;
	output [7:0]		sa32;
	output [7:0]		sa33;

	reg [7:0]		sa00;
	reg [7:0]		sa01;
	reg [7:0]		sa02;
	reg [7:0]		sa03;
	reg [7:0]		sa10;
	reg [7:0]		sa11;
	reg [7:0]		sa12;
	reg [7:0]		sa13;
	reg [7:0]		sa20;
	reg [7:0]		sa21;
	reg [7:0]		sa22;
	reg [7:0]		sa23;
	reg [7:0]		sa30;
	reg [7:0]		sa31;
	reg [7:0]		sa32;
	reg [7:0]		sa33;

always @(posedge clk)	sa33 <= #1 ld_r ? text_in_r[007:000] ^ w3[07:00] : sa33_next;
always @(posedge clk)	sa23 <= #1 ld_r ? text_in_r[015:008] ^ w3[15:08] : sa23_next;
always @(posedge clk)	sa13 <= #1 ld_r ? text_in_r[023:016] ^ w3[23:16] : sa13_next;
always @(posedge clk)	sa03 <= #1 ld_r ? text_in_r[031:024] ^ w3[31:24] : sa03_next;
always @(posedge clk)	sa32 <= #1 ld_r ? text_in_r[039:032] ^ w2[07:00] : sa32_next;
always @(posedge clk)	sa22 <= #1 ld_r ? text_in_r[047:040] ^ w2[15:08] : sa22_next;
always @(posedge clk)	sa12 <= #1 ld_r ? text_in_r[055:048] ^ w2[23:16] : sa12_next;
always @(posedge clk)	sa02 <= #1 ld_r ? text_in_r[063:056] ^ w2[31:24] : sa02_next;
always @(posedge clk)	sa31 <= #1 ld_r ? text_in_r[071:064] ^ w1[07:00] : sa31_next;
always @(posedge clk)	sa21 <= #1 ld_r ? text_in_r[079:072] ^ w1[15:08] : sa21_next;
always @(posedge clk)	sa11 <= #1 ld_r ? text_in_r[087:080] ^ w1[23:16] : sa11_next;
always @(posedge clk)	sa01 <= #1 ld_r ? text_in_r[095:088] ^ w1[31:24] : sa01_next;
always @(posedge clk)	sa30 <= #1 ld_r ? text_in_r[103:096] ^ w0[07:00] : sa30_next;
always @(posedge clk)	sa20 <= #1 ld_r ? text_in_r[111:104] ^ w0[15:08] : sa20_next;
always @(posedge clk)	sa10 <= #1 ld_r ? text_in_r[119:112] ^ w0[23:16] : sa10_next;
always @(posedge clk)	sa00 <= #1 ld_r ? text_in_r[127:120] ^ w0[31:24] : sa00_next;


endmodule
